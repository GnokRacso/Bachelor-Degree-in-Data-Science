--OPERATIONAL
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
CLEAR BUFFER
TTITLE OFF
CLEAR SCREEN

SET LINESIZE 120
SET PAGESIZE 100

COLUMN STAFFID HEADING "Staff ID" FORMAT A10
COLUMN STAFFNAME HEADING "Staff NAME" FORMAT A30
COLUMN TIME_ARRIVAL HEADING "TIME ARRIVAL" FORMAT A15
TTITLE LEFT "     =============================================" SKIP 1 -
LEFT "               STAFF WHO LATE TO WORK" SKIP 1 -
LEFT "     =============================================" SKIP 2 -
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 2
REPFOOTER SKIP 1 LEFT '                    ---- END ----' SKIP 1

SELECT S.STAFFID , S.STAFFNAME, TO_CHAR(SAS.STAFFLOGIN, 'HH24:MM:SS') AS TIME_ARRIVAL
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS
WHERE S.STAFFID = SAS.STAFFID AND
      TO_DATE(TO_CHAR(SAS.STAFFLOGIN, 'YYYY-MM-DD')) = TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD')) AND
      EXTRACT(HOUR FROM SAS.STAFFLOGIN) >= 8 AND
      EXTRACT(MINUTE FROM SAS.STAFFLOGIN) > 30
ORDER BY S.STAFFID;

COLUMN STAFFID HEADING "Staff ID" FORMAT A10
COLUMN STAFFNAME HEADING "Staff NAME" FORMAT A30
COLUMN STAFFPOST HEADING "Staff POSITION" FORMAT A30
COLUMN STAFFSTATUS HEADING "STATUS" FORMAT A10
TTITLE LEFT "                 =============================================" SKIP 1 -
LEFT "                         STAFF WHO TAKE MC / ON LEAVE" SKIP 1 -
LEFT "                 =============================================" SKIP 2 -
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 2
REPFOOTER SKIP 1 LEFT '                                 ---- END ----' SKIP 1

SELECT S.STAFFID, S.STAFFNAME, S.STAFFPOST, SAS.STAFFSTATUS
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS
WHERE S.STAFFID = SAS.STAFFID AND
      (SAS.STAFFSTATUS = 'MC' OR SAS.STAFFSTATUS = 'OL') 
ORDER BY S.STAFFID;


--TACTICAL
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
CLEAR BUFFER
TTITLE OFF
CLEAR SCREEN

SET LINESIZE 120
SET PAGESIZE 100

COLUMN STAFFID HEADING "Staff ID" FORMAT A10
COLUMN STAFFNAME HEADING "Staff NAME" FORMAT A30
COLUMN STAFFPOST HEADING "Staff POSITION" FORMAT A30
COLUMN LATENUM HEADING "LATE" FORMAT 99
COLUMN LATEFINE HEADING "FINE" FORMAT $999,999.99

TTITLE LEFT "                     =============================================" SKIP 1 -
LEFT "                               NUMBER OF LATE PER STAFF" SKIP 1 -
LEFT "                     =============================================" SKIP 2 -
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 2
REPFOOTER SKIP 1 LEFT '                                    ---- END ----' SKIP 1

SELECT S.STAFFID, S.STAFFNAME, S.STAFFPOST, SS.LATENUM, SS.LATEFINE
FROM STAFF S, STAFF_SALARY SS
WHERE S.STAFFID = SS.STAFFID AND
      SS.LATENUM > 0
ORDER BY SS.LATENUM DESC;

--STRATEGIC
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
CLEAR BUFFER
TTITLE OFF
CLEAR SCREEN

SET LINESIZE 120
SET PAGESIZE 100

ACCEPT ST_MONTH DATE FORMAT 'MONTH' PROMPT 'Enter the month >'

COLUMN STAFFID HEADING "Staff ID" FORMAT A10
COLUMN STAFFNAME HEADING "Staff NAME" FORMAT A30
COLUMN STAFFPOST HEADING "Staff POSITION" FORMAT A30
COLUMN CMC HEADING "CURRENT MC RECORD" FORMAT 999
COLUMN PMC HEADING "PREVIOUS MC RECORD" FORMAT 999

TTITLE LEFT '                    ===================================================================' SKIP 1 -
LEFT '                                        RECORD OF MC IN '&ST_MONTH'' SKIP 1 -
LEFT '                    ===================================================================' SKIP 2 -
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 2
REPFOOTER SKIP 1 LEFT '                                            ---- END ----' SKIP 1

CREATE OR REPLACE VIEW CURRENT_MONTH_MC AS
SELECT S.STAFFID, S.STAFFNAME, S.STAFFPOST, COUNT(SAS.STAFFSTATUS) AS CMC
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS
WHERE S.STAFFID = SAS.STAFFID AND
      SAS.STAFFSTATUS = 'MC' AND
      TO_CHAR(WORKDATE, 'MONTH') LIKE '%&ST_MONTH%'
GROUP BY S.STAFFID, S.STAFFNAME, S.STAFFPOST
ORDER BY COUNT(SAS.STAFFSTATUS) DESC;

CREATE OR REPLACE VIEW PREVIOUS_MONTH_MC AS
SELECT S.STAFFID, COUNT(SAS.STAFFSTATUS) AS PMC
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS, TEMPCALENDAR T
WHERE S.STAFFID = SAS.STAFFID AND
      SAS.STAFFSTATUS = 'MC' AND
      T.CALMONTH_NAME LIKE '%&ST_MONTH%' AND
      TO_CHAR(SAS.WORKDATE, 'MM') = T.CALMONTH_NUMYEAR-1
GROUP BY S.STAFFID
ORDER BY COUNT(SAS.STAFFSTATUS) DESC;

SELECT A.*, B.PMC
FROM CURRENT_MONTH_MC A
FULL JOIN PREVIOUS_MONTH_MC B
ON A.STAFFID = B.STAFFID;

COLUMN STAFFID HEADING "Staff ID" FORMAT A10
COLUMN STAFFNAME HEADING "Staff NAME" FORMAT A30
COLUMN STAFFPOST HEADING "Staff POSITION" FORMAT A30
COLUMN COL HEADING "CURRENT LEAVE RECORD" FORMAT 999
COLUMN POL HEADING "PREVIOUS LEAVE RECORD" FORMAT 999

TTITLE LEFT '                       ===================================================================' SKIP 1 -
LEFT '                                       RECORD OF ANNUAL LEAVE IN '&ST_MONTH'' SKIP 1 -
LEFT '                       ===================================================================' SKIP 2 -
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 2
REPFOOTER SKIP 1 LEFT '                                                 ---- END ----' SKIP 1

CREATE OR REPLACE VIEW CURRENT_MONTH_OL AS
SELECT S.STAFFID, S.STAFFNAME, S.STAFFPOST, COUNT(SAS.STAFFSTATUS) AS COL
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS
WHERE S.STAFFID = SAS.STAFFID AND
      SAS.STAFFSTATUS = 'OL' AND
      TO_CHAR(WORKDATE, 'MONTH') LIKE '%&ST_MONTH%'
GROUP BY S.STAFFID, S.STAFFNAME, S.STAFFPOST
ORDER BY COUNT(SAS.STAFFSTATUS) DESC;

CREATE OR REPLACE VIEW PREVIOUS_MONTH_OL AS
SELECT S.STAFFID, COUNT(SAS.STAFFSTATUS) AS POL
FROM STAFF S, STAFF_ACTIVITY_STATUS SAS, TEMPCALENDAR T
WHERE S.STAFFID = SAS.STAFFID AND
      SAS.STAFFSTATUS = 'OL' AND
      T.CALMONTH_NAME LIKE '%&ST_MONTH%' AND
      TO_CHAR(SAS.WORKDATE, 'MM') = T.CALMONTH_NUMYEAR-1
GROUP BY S.STAFFID
ORDER BY COUNT(SAS.STAFFSTATUS) DESC;

SELECT C.*, D.POL
FROM CURRENT_MONTH_OL C
FULL JOIN PREVIOUS_MONTH_OL D
ON C.STAFFID = D.STAFFID;

--Procedure1
--=========
CREATE OR REPLACE PROCEDURE PCR_STAFF_STATUS
                  (IN_STAFFID IN STAFF.STAFFID%TYPE, 
                   IN_STAFF_STATUS IN STAFF_ACTIVITY_STATUS.STAFFSTATUS%TYPE) IS

    V_STAFFNAME STAFF.STAFFNAME%TYPE;
    V_WORKDATE STAFF_ACTIVITY_STATUS.WORKDATE%TYPE;
    V_STAFFLOGIN STAFF_ACTIVITY_STATUS.STAFFLOGIN%TYPE;

    E_INVALID_STATUS EXCEPTION;
    E_INVALID_STAFFID EXCEPTION;
    PRAGMA EXCEPTION_INIT (E_INVALID_STAFFID, -20100);
    PRAGMA EXCEPTION_INIT (E_INVALID_STATUS, -20101); 
BEGIN
    IF FUN_VALIDATE_STAFFID(IN_STAFFID) = FALSE THEN
        RAISE_APPLICATION_ERROR(-20100, 'Invalid Staff ID!');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Valid Input!');

    SELECT STAFFNAME INTO V_STAFFNAME
    FROM STAFF 
    WHERE STAFFID = IN_STAFFID;

    V_WORKDATE := TO_DATE(SYSDATE, 'YYYY-MM-DD');
    V_STAFFLOGIN := TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');

   IF (IN_STAFF_STATUS = 'IN') THEN
        INSERT INTO STAFF_ACTIVITY_STATUS VALUES('', 'IN', V_WORKDATE, 
                                                 V_STAFFLOGIN, '', IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
        DBMS_OUTPUT.PUT_LINE('Staff ID  : ' || IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE('Staff NAME: ' || V_STAFFNAME);
        DBMS_OUTPUT.PUT_LINE('Check IN  : ' || V_STAFFLOGIN);
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
IN_STAFFID;
            DBMS_OUTPUT.PUT_L
        IF ((EXTRACT(HOUR FROM V_STAFFLOGIN) >= 8) OR (EXTRACT(MINUTE FROM V_STAFFLOGIN) > 30)) THEN
            UPDATE STAFF_SALARY 
               SET LATENUM = LATENUM + 1,
                   LATEFINE = LATEFINE + 50
               WHERE STAFFID = INE('You are LATE!');
        END IF;

    ELSIF (IN_STAFF_STATUS = 'OUT') THEN
        UPDATE STAFF_ACTIVITY_STATUS
            SET STAFFLOGOUT = V_STAFFLOGIN,
                STAFFSTATUS = 'OUT' 
            WHERE WORKDATE = TO_DATE(SYSDATE, 'YYYY-MM-DD') AND
                  STAFFID = IN_STAFFID;
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
        DBMS_OUTPUT.PUT_LINE('Staff ID  : ' || IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE('Staff NAME: ' || V_STAFFNAME);
        DBMS_OUTPUT.PUT_LINE('Check OUT : ' || V_STAFFLOGIN);
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));

    ELSIF (IN_STAFF_STATUS = 'MC') THEN
        INSERT INTO STAFF_ACTIVITY_STATUS VALUES('', 'MC', V_WORKDATE, '', '', IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
        DBMS_OUTPUT.PUT_LINE('Staff ID  : ' || IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE('Staff NAME: ' || V_STAFFNAME);
        DBMS_OUTPUT.PUT_LINE('Status    : Sick Leave');
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));

    ELSIF (IN_STAFF_STATUS = 'OL') THEN
        INSERT INTO STAFF_ACTIVITY_STATUS VALUES('', 'OL', V_WORKDATE, '', '', IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
        DBMS_OUTPUT.PUT_LINE('Staff ID  : ' || IN_STAFFID);
        DBMS_OUTPUT.PUT_LINE('Staff NAME: ' || V_STAFFNAME);
        DBMS_OUTPUT.PUT_LINE('Status    : Annual Leave');
        DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));

    ELSE
        RAISE_APPLICATION_ERROR(-20101, 'Invalid Staff Status!');
    END IF;

EXCEPTION
    WHEN E_INVALID_STAFFID THEN 
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN E_INVALID_STATUS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

--procedure 2
--========================
CREATE OR REPLACE PROCEDURE PCR_STAFF_CHANGE_POSITION
                  (IN_STAFFID IN STAFF.STAFFID%TYPE, 
                   IN_STAFF_POSITION IN STAFF.STAFFPOST%TYPE) IS

    V_STAFFNAME STAFF.STAFFNAME%TYPE;
    V_OLDSTAFFPOST STAFF.STAFFPOST%TYPE;
    V_NEWSTAFFPOST STAFF_POSITION.STAFFPOST%TYPE;
    V_OLDSALARY STAFF_SALARY.SALARYNUM%TYPE;
    V_NEWSALARY STAFF_POSITION.POSTSALARY%TYPE;

    E_INVALID_STAFFID EXCEPTION;
    PRAGMA EXCEPTION_INIT (E_INVALID_STAFFID, -20100); 
BEGIN
    IF FUN_VALIDATE_STAFFID(IN_STAFFID) = FALSE THEN
        RAISE_APPLICATION_ERROR(-20100, 'Invalid Staff ID!');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Valid Input!');

    SELECT S.STAFFNAME INTO V_STAFFNAME
    FROM STAFF S
    WHERE S.STAFFID = IN_STAFFID;

    SELECT S.STAFFPOST INTO V_OLDSTAFFPOST
    FROM STAFF S
    WHERE S.STAFFID = IN_STAFFID;

    SELECT SS.SALARYNUM INTO V_OLDSALARY
    FROM STAFF_SALARY SS
    WHERE SS.STAFFID = IN_STAFFID;

    SELECT SP.STAFFPOST INTO V_NEWSTAFFPOST
    FROM STAFF_POSITION SP
    WHERE SP.STAFFPOST = IN_STAFF_POSITION;

    SELECT SP.POSTSALARY INTO V_NEWSALARY
    FROM STAFF_POSITION SP
    WHERE SP.STAFFPOST = IN_STAFF_POSITION;

    UPDATE STAFF
        SET STAFFPOST = V_NEWSTAFFPOST
        WHERE STAFFID = IN_STAFFID;

    UPDATE STAFF_SALARY
        SET SALARYNUM = V_NEWSALARY
        WHERE STAFFID = IN_STAFFID;

    DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));
    DBMS_OUTPUT.PUT_LINE('Staff ID    : ' || IN_STAFFID);
    DBMS_OUTPUT.PUT_LINE('Staff NAME  : ' || V_STAFFNAME);    
    DBMS_OUTPUT.PUT_LINE('Old POSITION: ' || V_OLDSTAFFPOST);
    DBMS_OUTPUT.PUT_LINE('New POSITION: ' || V_NEWSTAFFPOST);
    DBMS_OUTPUT.PUT_LINE('Salary from RM' || V_OLDSALARY || ' to RM' || V_NEWSALARY);
    DBMS_OUTPUT.PUT_LINE('RECORD UPDATED SUCCESSFULLY!');
    DBMS_OUTPUT.PUT_LINE(CHR(10) || RPAD('-', 60, '-'));

EXCEPTION
    WHEN E_INVALID_STAFFID THEN 
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Position NOT FOUND or MISSPELLED');
        DBMS_OUTPUT.PUT_LINE('Please TRY Again :)');
END;
/

--Trigger
--=======
CREATE OR REPLACE TRIGGER RECORDNO_trigger
   BEFORE INSERT ON STAFF_ACTIVITY_STATUS
      REFERENCING NEW AS NEW
      FOR EACH ROW
   BEGIN
      SELECT staff_record_seq.nextval INTO :NEW.recordNo FROM dual;
END;
/

--Trigger2
--========
CREATE OR REPLACE TRIGGER TRG_DELETE_RECORD
    AFTER UPDATE OF LATENUM
    ON STAFF_SALARY
    FOR EACH ROW
DECLARE
    NEW_DAY NUMBER;
    
BEGIN
    NEW_DAY := TO_CHAR(TO_CHAR(SYSDATE, 'DD'), '99G990');

    IF (NEW_DAY <= 2) THEN
        UPDATE STAFF_SALARY
            SET LATENUM = 0
            WHERE STAFFID = :NEW.STAFFID;
    END IF;
END;
/

--Trigger3
--========
CREATE OR REPLACE TRIGGER TRG_DUPLICATE_CHECKIN
    BEFORE INSERT ON STAFF_ACTIVITY_STATUS
    FOR EACH ROW
DECLARE
    V_STAFFID STAFF.STAFFID%TYPE;
BEGIN
    SELECT STAFFID INTO V_STAFFID
    FROM STAFF_ACTIVITY_STATUS
    WHERE STAFFID = :NEW.STAFFID AND 
          WORKDATE = :NEW.WORKDATE;

    RAISE_APPLICATION_ERROR(-20101, 'STATUS for ' || V_STAFFID || ' DUPLICATED!');

EXCEPTION
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('Record added SUCCESSFULLY ~ ~');

END;
/

--Report1
--=======
CREATE OR REPLACE PROCEDURE PRC_SALARY_REPORT IS
    CURSOR STAFFPOSITION_CURSOR IS
        SELECT DISTINCT SP.STAFFPOST 
        FROM STAFF_POSITION SP;

    CURSOR STAFF_CURSOR(V_STAFFPOSITION VARCHAR2) IS 
        SELECT S.STAFFID, S.STAFFNAME, SS.SALARYNUM, SS.LATENUM,
               SS.LATEFINE, (SS.SALARYNUM - SS.LATEFINE) AS FINALPAY
        FROM STAFF S, STAFF_SALARY SS
        WHERE S.STAFFID = SS.STAFFID AND
              S.STAFFPOST = V_STAFFPOSITION
        GROUP BY S.STAFFID, S.STAFFNAME, SS.SALARYNUM, 
                 SS.LATENUM, SS.LATEFINE
        ORDER BY S.STAFFID ASC;
    
    TotalLateFine NUMBER(7,2) := 0;
    TotalStaffLate NUMBER(3) := 0;
    TotalSalary NUMBER(11,2) := 0;

    BEGIN
        DBMS_OUTPUT.PUT_LINE(CHR(10));
        DBMS_OUTPUT.PUT_LINE('* ' || LPAD('==========================', 60, ' '));
        DBMS_OUTPUT.PUT_LINE('* ' || LPAD('LATEST STAFF SALARY REPORT', 60, ' '));
        DBMS_OUTPUT.PUT_LINE('* ' || LPAD('==========================', 60, ' '));
        DBMS_OUTPUT.PUT_LINE(RPAD('* DATE', 10, ' ') || ' : ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD'));
        DBMS_OUTPUT.PUT_LINE(RPAD('* TIME', 10, ' ') || ' : ' || TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS'));
        DBMS_OUTPUT.PUT_LINE(RPAD('* DAY ', 10, ' ') || ' : ' || TO_CHAR(SYSDATE, 'DAY'));
        DBMS_OUTPUT.PUT_LINE(CHR(10));

        FOR STAFFSALARY_RECORD IN STAFFPOSITION_CURSOR LOOP
            DBMS_OUTPUT.PUT_LINE(CHR(10));
            DBMS_OUTPUT.PUT_LINE('* STAFF POSITION : ' || STAFFSALARY_RECORD.STAFFPOST);
            DBMS_OUTPUT.PUT_LINE(RPAD('=', 110, '='));
            DBMS_OUTPUT.PUT_LINE(RPAD('* ID', 10, ' ') || RPAD('NAME', 50, ' ') ||
                                 RPAD('SALARY', 15, ' ') || RPAD('LATE time', 10, ' ') ||
                                 RPAD('LATE FINE', 15, ' ') || RPAD('TOTAL ', 20, ' '));
            DBMS_OUTPUT.PUT_LINE(RPAD('=', 110, '='));

            TotalStaffLate := 0;
            TotalLateFine := 0;
            TotalSalary := 0;

            FOR STAFF_RECORD IN STAFF_CURSOR (STAFFSALARY_RECORD.STAFFPOST)
            LOOP
                DBMS_OUTPUT.PUT_LINE(RPAD(STAFF_RECORD.STAFFID, 10, ' ') || 
                                     RPAD(STAFF_RECORD.STAFFNAME, 50, ' ') ||
                                     RPAD(TRIM(TO_CHAR(STAFF_RECORD.SALARYNUM, '999G999D99')), 15, ' ') ||
                                     RPAD(STAFF_RECORD.LATENUM, 10, ' ') ||
                                     RPAD(TRIM(TO_CHAR(STAFF_RECORD.LATEFINE, '999G999D99')), 15, ' ') ||
                                     RPAD(TRIM(TO_CHAR(STAFF_RECORD.FINALPAY, '999G999D99')), 20, ' '));

                TotalStaffLate := TotalStaffLate + STAFF_RECORD.LATENUM;
                TotalLateFine := TotalLateFine + STAFF_RECORD.LATEFINE;
                TotalSalary := TotalSalary + STAFF_RECORD.FINALPAY;
            END LOOP;

            DBMS_OUTPUT.PUT_LINE(RPAD('=', 110, '='));
            DBMS_OUTPUT.PUT_LINE(RPAD('* ', 75, ' ') || 
                                 RPAD(TotalStaffLate, 10, ' ') ||
                                 RPAD(TRIM(TO_CHAR(TotalLateFine, '999G999D99')), 15, ' ') ||
                                 RPAD(TRIM(TO_CHAR(TotalSalary, '999G999D99')), 20, ' '));
            DBMS_OUTPUT.PUT_LINE(RPAD('=', 110, '='));
        END LOOP;
END;
/

--Sequence
--========
CREATE SEQUENCE STAFF_RECORD_SEQ
   START WITH 1
   INCREMENT BY 1
   NOCACHE;